// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/types.proto

package blockchain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockChainClient is the client API for BlockChain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockChainClient interface {
	Handshake(ctx context.Context, in *HandshakeMessage, opts ...grpc.CallOption) (*HandshakeMessage, error)
	HandleTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Ack, error)
}

type blockChainClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockChainClient(cc grpc.ClientConnInterface) BlockChainClient {
	return &blockChainClient{cc}
}

func (c *blockChainClient) Handshake(ctx context.Context, in *HandshakeMessage, opts ...grpc.CallOption) (*HandshakeMessage, error) {
	out := new(HandshakeMessage)
	err := c.cc.Invoke(ctx, "/BlockChain/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainClient) HandleTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/BlockChain/HandleTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockChainServer is the server API for BlockChain service.
// All implementations must embed UnimplementedBlockChainServer
// for forward compatibility
type BlockChainServer interface {
	Handshake(context.Context, *HandshakeMessage) (*HandshakeMessage, error)
	HandleTransaction(context.Context, *Transaction) (*Ack, error)
	mustEmbedUnimplementedBlockChainServer()
}

// UnimplementedBlockChainServer must be embedded to have forward compatible implementations.
type UnimplementedBlockChainServer struct {
}

func (UnimplementedBlockChainServer) Handshake(context.Context, *HandshakeMessage) (*HandshakeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedBlockChainServer) HandleTransaction(context.Context, *Transaction) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTransaction not implemented")
}
func (UnimplementedBlockChainServer) mustEmbedUnimplementedBlockChainServer() {}

// UnsafeBlockChainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockChainServer will
// result in compilation errors.
type UnsafeBlockChainServer interface {
	mustEmbedUnimplementedBlockChainServer()
}

func RegisterBlockChainServer(s grpc.ServiceRegistrar, srv BlockChainServer) {
	s.RegisterService(&BlockChain_ServiceDesc, srv)
}

func _BlockChain_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockChain/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).Handshake(ctx, req.(*HandshakeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChain_HandleTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).HandleTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockChain/HandleTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).HandleTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockChain_ServiceDesc is the grpc.ServiceDesc for BlockChain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockChain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlockChain",
	HandlerType: (*BlockChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _BlockChain_Handshake_Handler,
		},
		{
			MethodName: "HandleTransaction",
			Handler:    _BlockChain_HandleTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/types.proto",
}
